services:
  zookeeper:
    image: quay.io/debezium/zookeeper:${DEBEZIUM_VERSION}
    container_name: demo_zookeeper
    ports:
      - "2181:2181"
      - "2888:2888"
      - "3888:3888"
  kafka0:
    image: quay.io/debezium/kafka:${DEBEZIUM_VERSION}
    restart: always
    ports:
      - '9092:9092'
      - '29092:29092'
    links:
      - zookeeper
    environment:
      - ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_LISTENERS=INTERNAL://0.0.0.0:9092,EXTERNAL://0.0.0.0:29092
      - KAFKA_ADVERTISED_LISTENERS=INTERNAL://kafka0:9092,EXTERNAL://localhost:29092
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=INTERNAL
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: demo_kafka-ui
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka0:9092
    ports:
      - "9089:8080"
    links:
      - kafka0
  mssql: 
    image: mcr.microsoft.com/mssql/server:2019-latest
    container_name: mssqlserver
    restart: always
    hostname: mssql
    environment:
      SA_PASSWORD: 01224528911Ss
      ACCEPT_EULA: Y
    ports:
      - "1433:1433"
  mysql:
    image: mysql:8.0
    container_name: demo_mysql_container
    environment:
      MYSQL_ROOT_PASSWORD: root1234
      MYSQL_DATABASE: shopdev_user
      MYSQL_USER: crm_user
      MYSQL_PASSWORD: root1234
    ports:
      - "30306:3306"
  redis:
    image: redis:7.0
    container_name: demo_redis_container
    ports:
      - "6379:6379"
  connect:
    image: quay.io/debezium/connect:${DEBEZIUM_VERSION}
    container_name: demo_connect
    restart: always
    ports:
      - 8083:8083
    links:
      - kafka0
      - mysql
    environment:
      - BOOTSTRAP_SERVERS=kafka0:9092
      - GROUP_ID=1
      - CONFIG_STORAGE_TOPIC=my_connect_configs
      - OFFSET_STORAGE_TOPIC=my_connect_offsets
      - STATUS_STORAGE_TOPIC=my_connect_statuses
  crm-shopdev:
    container_name: go_backend_crm_shopdev
    build:
      context: go_microservice_backend
      dockerfile: cmd/server/user/Dockerfile
    restart: always
    depends_on:
      - mysql
      - redis
      - connect
      - kafka-ui
      - kafka0
      - zookeeper
    ports:
      - "8008:8002"
    volumes:
      - ./go_microservice_backend/certs:/certs
  crm-sendmail:
    container_name: go_sendmail_service
    build:
      context: go_microservice_backend
      dockerfile: cmd/server/sendmail/Dockerfile
    restart: always
    depends_on:
      - mysql
      - redis
      - connect
      - kafka-ui
      - kafka0
      - zookeeper
    ports:
      - "8009:8003"
    volumes:
      - ./go_microservice_backend/certs:/certs
  crm-shop:
    container_name: go_shop_service
    build:
      context: go_microservice_backend
      dockerfile: cmd/server/shop/Dockerfile
    restart: always
    depends_on:
      - mysql
      - redis
      - connect
      - kafka-ui
      - kafka0
      - zookeeper
    ports:
      - "8010:8004"
      - "7001:6001"
    volumes:
      - ./go_microservice_backend/certs:/certs
  crm-product:
    container_name: go_product_service
    build:
      context: go_microservice_backend
      dockerfile: cmd/server/product/Dockerfile
    restart: always
    depends_on:
      - mysql
      - redis
      - connect
      - kafka-ui
      - kafka0
      - zookeeper
    ports:
      - "6002:7002"
    volumes:
      - ./go_microservice_backend/certs:/certs
#    environment:
#      - AIR_CONFIG_PATH=/app/.air.toml

  crm-order:
    container_name: dotnet_order_service
    build:
      context: dotnet_microservice_backend
      dockerfile: Order.API/Dockerfile
    restart: always
    depends_on:
      - redis
      - connect
      - kafka-ui
      - kafka0
      - zookeeper
  #######################################
  # Postgres: The database used by Kong
  #######################################
  kong-database:
    image: postgres:9.6
    environment:
      POSTGRES_USER: kong
      POSTGRES_DB: kong
      POSTGRES_PASSWORD: kong
    volumes:
      - ./kong_gateway/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "kong" ]
      interval: 5s
      timeout: 5s
      retries: 5

  #######################################
  # Kong database migration
  #######################################
  kong-migration:
    image: kong:latest
    command: "kong migrations bootstrap -c /etc/kong/kong.conf"
    restart: on-failure
    volumes:
      - ./kong_gateway/kong/kong.conf:/etc/kong/kong.conf
    environment:
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
    links:
      - kong-database
    depends_on:
      - kong-database

  #######################################
  # Kong: The API Gateway
  #######################################
  kong:
    image: kong:latest
    restart: on-failure
    environment:
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
#      KONG_DATABASE: postgres
      KONG_DECLARATIVE_CONFIG: "/etc/kong/kong-config.yaml"
      KONG_DATABASE: "off"
      KONG_PROXY_LISTEN: 0.0.0.0:8000, 0.0.0.0:8443 ssl
      KONG_ADMIN_LISTEN: 0.0.0.0:8001, 0.0.0.0:8444 ssl
#      KONG_PROXY_LISTEN_SSL: 0.0.0.0:8443
#      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_SSL_CERT: /etc/certs/cert.crt
      KONG_SSL_CERT_KEY: /etc/certs/key.pem
      KONG_ADMIN_SSL_CERT: /etc/certs/cert.crt
      KONG_ADMIN_SSL_CERT_KEY: /etc/certs/key.pem
    depends_on:
      - kong-migration
      - kong-database
    healthcheck:
      test: [ "CMD", "curl", "-f", "https://kong:8001" ]
      interval: 5s
      timeout: 2s
      retries: 15
    ports:
      - "8000:8000"
      - "8443:8443"
      - "8001:8001"
      - "8444:8444"
    volumes:
      - ./go_microservice_backend/certs:/etc/certs
      - ./go_microservice_backend/internal/proto:/usr/local/kong/internal/go/proto
      - ./dotnet_microservice_backend/Order.API/Protos:/usr/local/kong/internal/dotnet/proto/order
      - ./go_microservice_backend/google:/usr/local/kong/include/google
      - ./go_microservice_backend/protobuf:/google/protobuf
      - ./kong_gateway/kong/kong-config.yaml:/etc/kong/kong-config.yaml

  #######################################
  # Konga database prepare
  #######################################
  konga-prepare:
    image: pantsel/konga:next
    command: "-c prepare -a postgres -u postgresql://kong:kong@kong-database:5432/konga_db"
    restart: on-failure
    links:
      - kong-database
    depends_on:
      - kong-database

  #######################################
  # Konga: Kong GUI
  #######################################
  konga:
    image: pantsel/konga:next
    environment:
      DB_ADAPTER: postgres
      DB_HOST: kong-database
      DB_USER: kong
      DB_PASSWORD: kong
      TOKEN_SECRET: km1GUr4RkcQD7DewhJPNXrCuZwcKmqjb
      DB_DATABASE: konga_db
      NODE_ENV: production
    depends_on:
      - kong-database
    ports:
      - "1337:1337"

volumes:
  crm-product-cache:
