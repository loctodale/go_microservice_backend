// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: internal/proto/shop/shop_service.proto

package grpc_gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ShopService_ShopRegister_FullMethodName             = "/shopservice.ShopService/ShopRegister"
	ShopService_ShopVerifyOTP_FullMethodName            = "/shopservice.ShopService/ShopVerifyOTP"
	ShopService_ShopChangePasswordVerify_FullMethodName = "/shopservice.ShopService/ShopChangePasswordVerify"
	ShopService_ShopLogin_FullMethodName                = "/shopservice.ShopService/ShopLogin"
)

// ShopServiceClient is the client API for ShopService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShopServiceClient interface {
	ShopRegister(ctx context.Context, in *ShopRegisterInput, opts ...grpc.CallOption) (*SampleResponse, error)
	ShopVerifyOTP(ctx context.Context, in *ShopVerifyOTPInput, opts ...grpc.CallOption) (*VerifyOTPResponse, error)
	ShopChangePasswordVerify(ctx context.Context, in *ShopChangePasswordVerifyInput, opts ...grpc.CallOption) (*StringResponse, error)
	ShopLogin(ctx context.Context, in *ShopLoginInput, opts ...grpc.CallOption) (*VerifyOTPResponse, error)
}

type shopServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShopServiceClient(cc grpc.ClientConnInterface) ShopServiceClient {
	return &shopServiceClient{cc}
}

func (c *shopServiceClient) ShopRegister(ctx context.Context, in *ShopRegisterInput, opts ...grpc.CallOption) (*SampleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SampleResponse)
	err := c.cc.Invoke(ctx, ShopService_ShopRegister_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopServiceClient) ShopVerifyOTP(ctx context.Context, in *ShopVerifyOTPInput, opts ...grpc.CallOption) (*VerifyOTPResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyOTPResponse)
	err := c.cc.Invoke(ctx, ShopService_ShopVerifyOTP_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopServiceClient) ShopChangePasswordVerify(ctx context.Context, in *ShopChangePasswordVerifyInput, opts ...grpc.CallOption) (*StringResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StringResponse)
	err := c.cc.Invoke(ctx, ShopService_ShopChangePasswordVerify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopServiceClient) ShopLogin(ctx context.Context, in *ShopLoginInput, opts ...grpc.CallOption) (*VerifyOTPResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyOTPResponse)
	err := c.cc.Invoke(ctx, ShopService_ShopLogin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShopServiceServer is the server API for ShopService service.
// All implementations must embed UnimplementedShopServiceServer
// for forward compatibility.
type ShopServiceServer interface {
	ShopRegister(context.Context, *ShopRegisterInput) (*SampleResponse, error)
	ShopVerifyOTP(context.Context, *ShopVerifyOTPInput) (*VerifyOTPResponse, error)
	ShopChangePasswordVerify(context.Context, *ShopChangePasswordVerifyInput) (*StringResponse, error)
	ShopLogin(context.Context, *ShopLoginInput) (*VerifyOTPResponse, error)
	mustEmbedUnimplementedShopServiceServer()
}

// UnimplementedShopServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedShopServiceServer struct{}

func (UnimplementedShopServiceServer) ShopRegister(context.Context, *ShopRegisterInput) (*SampleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShopRegister not implemented")
}
func (UnimplementedShopServiceServer) ShopVerifyOTP(context.Context, *ShopVerifyOTPInput) (*VerifyOTPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShopVerifyOTP not implemented")
}
func (UnimplementedShopServiceServer) ShopChangePasswordVerify(context.Context, *ShopChangePasswordVerifyInput) (*StringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShopChangePasswordVerify not implemented")
}
func (UnimplementedShopServiceServer) ShopLogin(context.Context, *ShopLoginInput) (*VerifyOTPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShopLogin not implemented")
}
func (UnimplementedShopServiceServer) mustEmbedUnimplementedShopServiceServer() {}
func (UnimplementedShopServiceServer) testEmbeddedByValue()                     {}

// UnsafeShopServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShopServiceServer will
// result in compilation errors.
type UnsafeShopServiceServer interface {
	mustEmbedUnimplementedShopServiceServer()
}

func RegisterShopServiceServer(s grpc.ServiceRegistrar, srv ShopServiceServer) {
	// If the following call pancis, it indicates UnimplementedShopServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ShopService_ServiceDesc, srv)
}

func _ShopService_ShopRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShopRegisterInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServiceServer).ShopRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShopService_ShopRegister_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServiceServer).ShopRegister(ctx, req.(*ShopRegisterInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopService_ShopVerifyOTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShopVerifyOTPInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServiceServer).ShopVerifyOTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShopService_ShopVerifyOTP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServiceServer).ShopVerifyOTP(ctx, req.(*ShopVerifyOTPInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopService_ShopChangePasswordVerify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShopChangePasswordVerifyInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServiceServer).ShopChangePasswordVerify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShopService_ShopChangePasswordVerify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServiceServer).ShopChangePasswordVerify(ctx, req.(*ShopChangePasswordVerifyInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopService_ShopLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShopLoginInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServiceServer).ShopLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShopService_ShopLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServiceServer).ShopLogin(ctx, req.(*ShopLoginInput))
	}
	return interceptor(ctx, in, info, handler)
}

// ShopService_ServiceDesc is the grpc.ServiceDesc for ShopService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShopService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shopservice.ShopService",
	HandlerType: (*ShopServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ShopRegister",
			Handler:    _ShopService_ShopRegister_Handler,
		},
		{
			MethodName: "ShopVerifyOTP",
			Handler:    _ShopService_ShopVerifyOTP_Handler,
		},
		{
			MethodName: "ShopChangePasswordVerify",
			Handler:    _ShopService_ShopChangePasswordVerify_Handler,
		},
		{
			MethodName: "ShopLogin",
			Handler:    _ShopService_ShopLogin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/proto/shop/shop_service.proto",
}
